<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IceGrid</name>
    </assembly>
    <members>
        <member name="T:IceGrid.AdminOperations_">
            <summary>
            The IceGrid administrative interface.
            
            Allowing access to this interface
            is a security risk! Please see the IceGrid documentation
            for further information.
            </summary>
        </member>
        <member name="M:IceGrid.AdminOperations_.addApplication(IceGrid.ApplicationDescriptor,Ice.Current)">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.syncApplication(IceGrid.ApplicationDescriptor,Ice.Current)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.Current)">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.Current)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor only if no server restarts are
            necessary for the update of the application. If some servers
            need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.Current)">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeApplication(System.String,Ice.Current)">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="name">The application name.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.Current)">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="application">The application name.
            
            </param>
            <param name="node">The name of the node where the server will be
            deployed.
            
            </param>
            <param name="desc">The descriptor of the server instance to deploy.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if server instantiation
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.patchApplication_async(IceGrid.AMD_Admin_patchApplication,System.String,System.Boolean,Ice.Current)">
            <summary>
            Patch the given application data.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="name">The application name.
            
            </param>
            <param name="shutdown">If true, the servers depending on the data to
            patch will be shut down if necessary.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getApplicationInfo(System.String,Ice.Current)">
            <summary>
            Get an application descriptor.
            </summary>
            <param name="name">The application name.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getDefaultApplicationDescriptor(Ice.Current)">
            <summary>
            Get the default application descriptor.
            </summary>
            <exception name="DeploymentException">Raised if the default application
            descriptor can't be accessed or is invalid.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllApplicationNames(Ice.Current)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerInfo(System.String,Ice.Current)">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <returns>The server information.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerState(System.String,Ice.Current)">
            <summary>
            Get a server's state.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server state.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerPid(System.String,Ice.Current)">
            <summary>
            Get a server's system process id.
            The process id is operating
            system dependent.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server's process id.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerAdminCategory(Ice.Current)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            proxy from the admin proxy by changing its identity: use the server ID as name
            and the returned category as category.
            
            </summary>
            <returns>The category for server admin objects.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerAdmin(System.String,Ice.Current)">
            <summary>
            Get a proxy to the server's admin object.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>A proxy to the server's admin object
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.enableServer(System.String,System.Boolean,Ice.Current)">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            on demand or administratively. The enable state of the server
            is not persistent: if the node is shut down and restarted, the
            server will be enabled by default.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="enabled">True to enable the server, false to disable it.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.isServerEnabled(System.String,Ice.Current)">
            <summary>
            Check if the server is enabled or disabled.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.startServer_async(IceGrid.AMD_Admin_startServer,System.String,Ice.Current)">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.stopServer_async(IceGrid.AMD_Admin_stopServer,System.String,Ice.Current)">
            <summary>
            Stop a server.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.patchServer_async(IceGrid.AMD_Admin_patchServer,System.String,System.Boolean,Ice.Current)">
            <summary>
            Patch a server.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
            <param name="shutdown">If true, servers depending on the data to patch
            will be shut down if necessary.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.sendSignal(System.String,System.String,Ice.Current)">
            <summary>
            Send signal to a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="signal">The signal, for example SIGTERM or 15.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="BadSignalException">Raised if the signal is not recognized
            by the target server.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllServerIds(Ice.Current)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAdapterInfo(System.String,Ice.Current)">
            <summary>
            Get the adapter information for the replica group or adapter
            with the given id.
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>A sequence of adapter information structures. If the
            given id refers to an adapter, this sequence will contain only
            one element. If the given id refers to a replica group, the
            sequence will contain the adapter information of each member of
            the replica group.
            
            </returns>
            <exception name="AdapterNotExistException">Raised if the adapter or
            replica group doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeAdapter(System.String,Ice.Current)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <exception name="AdapterNotExistException">Raised if the adapter doesn't
            exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllAdapterIds(Ice.Current)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.addObject(Ice.ObjectPrx,Ice.Current)">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            object type by calling ice_id on the given proxy. The object
            must be reachable.
            
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            added. This might be raised if the invocation on the proxy to
            get the object type failed.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateObject(Ice.ObjectPrx,Ice.Current)">
            <summary>
            Update an object in the object registry.
            Only objects added
            with this interface can be updated with this operation. Objects
            added with deployment descriptors should be updated with the
            deployment mechanism.
            
            </summary>
            <param name="obj">The object to be updated to the registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            updated. This might happen if the object was added with a
            deployment descriptor.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.addObjectWithType(Ice.ObjectPrx,System.String,Ice.Current)">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="type">The object type.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeObject(Ice.Identity,Ice.Current)">
            <summary>
            Remove an object from the object registry.
            Only objects added
            with this interface can be removed with this operation. Objects
            added with deployment descriptors should be removed with the
            deployment mechanism.
            
            </summary>
            <param name="id">The identity of the object to be removed from the
            registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            removed. This might happen if the object was added with a
            deployment descriptor.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getObjectInfo(Ice.Identity,Ice.Current)">
            <summary>
            Get the object info for the object with the given identity.
            </summary>
            <param name="id">The identity of the object.
            
            </param>
            <returns>The object info.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getObjectInfosByType(System.String,Ice.Current)">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The object infos.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllObjectInfos(System.String,Ice.Current)">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="expr">The expression to match against the stringified
            identities of registered objects. The expression may contain
            a trailing wildcard (*) character.
            
            </param>
            <returns>All the object infos with a stringified identity
            matching the given expression.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.pingNode(System.String,Ice.Current)">
            <summary>
            Ping an IceGrid node to see if it is active.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>true if the node ping succeeded, false otherwise.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeLoad(System.String,Ice.Current)">
            <summary>
            Get the load averages of the node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node load information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeInfo(System.String,Ice.Current)">
            <summary>
            Get the node information for the node with the given name.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeAdmin(System.String,Ice.Current)">
            <summary>
            Get a proxy to the IceGrid node's admin object.
            </summary>
            <param name="name">The IceGrid node name
            
            </param>
            <returns>A proxy to the IceGrid node's admin object
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeProcessorSocketCount(System.String,Ice.Current)">
            <summary>
            Get the number of physical processor sockets for the machine
            running the node with the given name.
            Note that this method will return 1 on operating systems where
            this can't be automatically determined and where the
            IceGrid.Node.ProcessorSocketCount property for the node is not
            set.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The number of processor sockets or 1 if the number of
            sockets can't determined.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdownNode(System.String,Ice.Current)">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeHostname(System.String,Ice.Current)">
            <summary>
            Get the hostname of this node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node hostname.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllNodeNames(Ice.Current)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.pingRegistry(System.String,Ice.Current)">
            <summary>
            Ping an IceGrid registry to see if it is active.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>true if the registry ping succeeded, false otherwise.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getRegistryInfo(System.String,Ice.Current)">
            <summary>
            Get the registry information for the registry with the given name.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>The registry information.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getRegistryAdmin(System.String,Ice.Current)">
            <summary>
            Get a proxy to the IceGrid registry's admin object.
            </summary>
            <param name="name">The registry name
            
            </param>
            <returns>A proxy to the IceGrid registry's admin object
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdownRegistry(System.String,Ice.Current)">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllRegistryNames(Ice.Current)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdown(Ice.Current)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getSliceChecksums(Ice.Current)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdminOperationsNC_">
            <summary>
            The IceGrid administrative interface.
            
            Allowing access to this interface
            is a security risk! Please see the IceGrid documentation
            for further information.
            </summary>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.addApplication(IceGrid.ApplicationDescriptor)">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.syncApplication(IceGrid.ApplicationDescriptor)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.updateApplication(IceGrid.ApplicationUpdateDescriptor)">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor only if no server restarts are
            necessary for the update of the application. If some servers
            need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor)">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.removeApplication(System.String)">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="name">The application name.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor)">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="application">The application name.
            
            </param>
            <param name="node">The name of the node where the server will be
            deployed.
            
            </param>
            <param name="desc">The descriptor of the server instance to deploy.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if server instantiation
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.patchApplication_async(IceGrid.AMD_Admin_patchApplication,System.String,System.Boolean)">
            <summary>
            Patch the given application data.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="name">The application name.
            
            </param>
            <param name="shutdown">If true, the servers depending on the data to
            patch will be shut down if necessary.
            
            </param>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getApplicationInfo(System.String)">
            <summary>
            Get an application descriptor.
            </summary>
            <param name="name">The application name.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getDefaultApplicationDescriptor">
            <summary>
            Get the default application descriptor.
            </summary>
            <exception name="DeploymentException">Raised if the default application
            descriptor can't be accessed or is invalid.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllApplicationNames">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getServerInfo(System.String)">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <returns>The server information.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getServerState(System.String)">
            <summary>
            Get a server's state.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server state.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getServerPid(System.String)">
            <summary>
            Get a server's system process id.
            The process id is operating
            system dependent.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server's process id.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getServerAdminCategory">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            proxy from the admin proxy by changing its identity: use the server ID as name
            and the returned category as category.
            
            </summary>
            <returns>The category for server admin objects.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getServerAdmin(System.String)">
            <summary>
            Get a proxy to the server's admin object.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>A proxy to the server's admin object
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.enableServer(System.String,System.Boolean)">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            on demand or administratively. The enable state of the server
            is not persistent: if the node is shut down and restarted, the
            server will be enabled by default.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="enabled">True to enable the server, false to disable it.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.isServerEnabled(System.String)">
            <summary>
            Check if the server is enabled or disabled.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.startServer_async(IceGrid.AMD_Admin_startServer,System.String)">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.stopServer_async(IceGrid.AMD_Admin_stopServer,System.String)">
            <summary>
            Stop a server.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.patchServer_async(IceGrid.AMD_Admin_patchServer,System.String,System.Boolean)">
            <summary>
            Patch a server.
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The server id.
            
            </param>
            <param name="shutdown">If true, servers depending on the data to patch
            will be shut down if necessary.
            
            </param>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.sendSignal(System.String,System.String)">
            <summary>
            Send signal to a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="signal">The signal, for example SIGTERM or 15.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="BadSignalException">Raised if the signal is not recognized
            by the target server.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllServerIds">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAdapterInfo(System.String)">
            <summary>
            Get the adapter information for the replica group or adapter
            with the given id.
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>A sequence of adapter information structures. If the
            given id refers to an adapter, this sequence will contain only
            one element. If the given id refers to a replica group, the
            sequence will contain the adapter information of each member of
            the replica group.
            
            </returns>
            <exception name="AdapterNotExistException">Raised if the adapter or
            replica group doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.removeAdapter(System.String)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <exception name="AdapterNotExistException">Raised if the adapter doesn't
            exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllAdapterIds">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.addObject(Ice.ObjectPrx)">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            object type by calling ice_id on the given proxy. The object
            must be reachable.
            
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            added. This might be raised if the invocation on the proxy to
            get the object type failed.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.updateObject(Ice.ObjectPrx)">
            <summary>
            Update an object in the object registry.
            Only objects added
            with this interface can be updated with this operation. Objects
            added with deployment descriptors should be updated with the
            deployment mechanism.
            
            </summary>
            <param name="obj">The object to be updated to the registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            updated. This might happen if the object was added with a
            deployment descriptor.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.addObjectWithType(Ice.ObjectPrx,System.String)">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="type">The object type.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.removeObject(Ice.Identity)">
            <summary>
            Remove an object from the object registry.
            Only objects added
            with this interface can be removed with this operation. Objects
            added with deployment descriptors should be removed with the
            deployment mechanism.
            
            </summary>
            <param name="id">The identity of the object to be removed from the
            registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            removed. This might happen if the object was added with a
            deployment descriptor.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getObjectInfo(Ice.Identity)">
            <summary>
            Get the object info for the object with the given identity.
            </summary>
            <param name="id">The identity of the object.
            
            </param>
            <returns>The object info.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getObjectInfosByType(System.String)">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The object infos.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllObjectInfos(System.String)">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="expr">The expression to match against the stringified
            identities of registered objects. The expression may contain
            a trailing wildcard (*) character.
            
            </param>
            <returns>All the object infos with a stringified identity
            matching the given expression.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.pingNode(System.String)">
            <summary>
            Ping an IceGrid node to see if it is active.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>true if the node ping succeeded, false otherwise.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getNodeLoad(System.String)">
            <summary>
            Get the load averages of the node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node load information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getNodeInfo(System.String)">
            <summary>
            Get the node information for the node with the given name.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getNodeAdmin(System.String)">
            <summary>
            Get a proxy to the IceGrid node's admin object.
            </summary>
            <param name="name">The IceGrid node name
            
            </param>
            <returns>A proxy to the IceGrid node's admin object
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getNodeProcessorSocketCount(System.String)">
            <summary>
            Get the number of physical processor sockets for the machine
            running the node with the given name.
            Note that this method will return 1 on operating systems where
            this can't be automatically determined and where the
            IceGrid.Node.ProcessorSocketCount property for the node is not
            set.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The number of processor sockets or 1 if the number of
            sockets can't determined.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.shutdownNode(System.String)">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getNodeHostname(System.String)">
            <summary>
            Get the hostname of this node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node hostname.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllNodeNames">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.pingRegistry(System.String)">
            <summary>
            Ping an IceGrid registry to see if it is active.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>true if the registry ping succeeded, false otherwise.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getRegistryInfo(System.String)">
            <summary>
            Get the registry information for the registry with the given name.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>The registry information.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getRegistryAdmin(System.String)">
            <summary>
            Get a proxy to the IceGrid registry's admin object.
            </summary>
            <param name="name">The registry name
            
            </param>
            <returns>A proxy to the IceGrid registry's admin object
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.shutdownRegistry(System.String)">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getAllRegistryNames">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.shutdown">
            <summary>
            Shut down the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.AdminOperationsNC_.getSliceChecksums">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
        </member>
        <member name="T:IceGrid.FileIteratorOperations_">
            <summary>
            This interface provides access to IceGrid log file contents.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorOperations_.read(System.Int32,System.String[]@,Ice.Current)">
            <summary>
            Read lines from the log file.
            </summary>
            <param name="size">Specifies the maximum number of bytes to be
            received. The server will ensure that the returned message
            doesn't exceed the given size.
            
            </param>
            <param name="lines">The lines read from the file. If there was nothing to
            read from the file since the last call to read, an empty
            sequence is returned. The last line of the sequence is always
            incomplete (and therefore no '\n' should be added when writing
            the last line to the to the output device).
            
            </param>
            <returns>True if EOF is encountered.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if there was a problem
            to read lines from the file.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorOperations_.destroy(Ice.Current)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.FileIteratorOperationsNC_">
            <summary>
            This interface provides access to IceGrid log file contents.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorOperationsNC_.read(System.Int32,System.String[]@)">
            <summary>
            Read lines from the log file.
            </summary>
            <param name="size">Specifies the maximum number of bytes to be
            received. The server will ensure that the returned message
            doesn't exceed the given size.
            
            </param>
            <param name="lines">The lines read from the file. If there was nothing to
            read from the file since the last call to read, an empty
            sequence is returned. The last line of the sequence is always
            incomplete (and therefore no '\n' should be added when writing
            the last line to the to the output device).
            
            </param>
            <returns>True if EOF is encountered.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if there was a problem
            to read lines from the file.</exception>
        </member>
        <member name="M:IceGrid.FileIteratorOperationsNC_.destroy">
            <summary>
            Destroy the iterator.
            </summary>
        </member>
        <member name="T:IceGrid.AdminSessionOperations_">
            <summary>
            Used by administrative clients to view,
            update, and receive observer updates from the IceGrid
            registry.
            Admin sessions are created either with the Registry
            object or the registry admin Glacier2.SessionManager object.
            
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.keepAlive(Ice.Current)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getAdmin(Ice.Current)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            operation can only be accessed by the session.
            
            </summary>
            <returns>The admin interface proxy.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getAdminCallbackTemplate(Ice.Current)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            objects, and the published endpoints of the object adapter hosting
            the admin callback objects.
            
            </summary>
            <returns>A template proxy. The returned proxy is null when the Admin
            session was established using Glacier2.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.Current)">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="registryObs">The registry observer.
            
            </param>
            <param name="nodeObs">The node observer.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Current)">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            are using a bidirectional connection to communicate with the
            session.
            
            </summary>
            <param name="registryObs">The registry observer identity.
            
            </param>
            <param name="nodeObs">The node observer identity.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.startUpdate(Ice.Current)">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <returns>The current serial.
            
            </returns>
            <exception name="AccessDeniedException">Raised if the exclusive lock can't be
            acquired. This might happen if the lock is currently acquired by
            another session.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.finishUpdate(Ice.Current)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getReplicaName(Ice.Current)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerLog(System.String,System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given server log file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="path">The path of the log file. A log file can be opened
            only if it's declared in the server or service deployment
            descriptor.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerStdErr(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given server stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerStdOut(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given server stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openNodeStdErr(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given node stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openNodeStdOut(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given node stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openRegistryStdErr(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given registry stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openRegistryStdOut(System.String,System.Int32,Ice.Current)">
            <summary>
            Open the given registry stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdminSessionOperationsNC_">
            <summary>
            Used by administrative clients to view,
            update, and receive observer updates from the IceGrid
            registry.
            Admin sessions are created either with the Registry
            object or the registry admin Glacier2.SessionManager object.
            
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.keepAlive">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.getAdmin">
            <summary>
            Get the admin interface.
            The admin object returned by this
            operation can only be accessed by the session.
            
            </summary>
            <returns>The admin interface proxy.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.getAdminCallbackTemplate">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            objects, and the published endpoints of the object adapter hosting
            the admin callback objects.
            
            </summary>
            <returns>A template proxy. The returned proxy is null when the Admin
            session was established using Glacier2.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx)">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="registryObs">The registry observer.
            
            </param>
            <param name="nodeObs">The node observer.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity)">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            are using a bidirectional connection to communicate with the
            session.
            
            </summary>
            <param name="registryObs">The registry observer identity.
            
            </param>
            <param name="nodeObs">The node observer identity.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.startUpdate">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <returns>The current serial.
            
            </returns>
            <exception name="AccessDeniedException">Raised if the exclusive lock can't be
            acquired. This might happen if the lock is currently acquired by
            another session.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.finishUpdate">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.getReplicaName">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openServerLog(System.String,System.String,System.Int32)">
            <summary>
            Open the given server log file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="path">The path of the log file. A log file can be opened
            only if it's declared in the server or service deployment
            descriptor.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openServerStdErr(System.String,System.Int32)">
            <summary>
            Open the given server stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openServerStdOut(System.String,System.Int32)">
            <summary>
            Open the given server stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openNodeStdErr(System.String,System.Int32)">
            <summary>
            Open the given node stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openNodeStdOut(System.String,System.Int32)">
            <summary>
            Open the given node stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openRegistryStdErr(System.String,System.Int32)">
            <summary>
            Open the given registry stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionOperationsNC_.openRegistryStdOut(System.String,System.Int32)">
            <summary>
            Open the given registry stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
        </member>
        <member name="T:IceGrid.AdminPrxHelper">
            <summary>
            The IceGrid administrative interface.
            
            Allowing access to this interface
            is a security risk! Please see the IceGrid documentation
            for further information.
            </summary>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addApplication(IceGrid.ApplicationDescriptor)">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addApplication(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addObject(Ice.ObjectPrx)">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            object type by calling ice_id on the given proxy. The object
            must be reachable.
            
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            added. This might be raised if the invocation on the proxy to
            get the object type failed.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addObject(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            object type by calling ice_id on the given proxy. The object
            must be reachable.
            
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            added. This might be raised if the invocation on the proxy to
            get the object type failed.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addObjectWithType(Ice.ObjectPrx,System.String)">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="type">The object type.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.addObjectWithType(Ice.ObjectPrx,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="type">The object type.
            
            </param>
            <exception name="ObjectExistsException">Raised if the object is already
            registered.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.enableServer(System.String,System.Boolean)">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            on demand or administratively. The enable state of the server
            is not persistent: if the node is shut down and restarted, the
            server will be enabled by default.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="enabled">True to enable the server, false to disable it.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.enableServer(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            on demand or administratively. The enable state of the server
            is not persistent: if the node is shut down and restarted, the
            server will be enabled by default.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="enabled">True to enable the server, false to disable it.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAdapterInfo(System.String)">
            <summary>
            Get the adapter information for the replica group or adapter
            with the given id.
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>A sequence of adapter information structures. If the
            given id refers to an adapter, this sequence will contain only
            one element. If the given id refers to a replica group, the
            sequence will contain the adapter information of each member of
            the replica group.
            
            </returns>
            <exception name="AdapterNotExistException">Raised if the adapter or
            replica group doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAdapterInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the adapter information for the replica group or adapter
            with the given id.
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>A sequence of adapter information structures. If the
            given id refers to an adapter, this sequence will contain only
            one element. If the given id refers to a replica group, the
            sequence will contain the adapter information of each member of
            the replica group.
            
            </returns>
            <exception name="AdapterNotExistException">Raised if the adapter or
            replica group doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllAdapterIds">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllAdapterIds(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllApplicationNames">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllApplicationNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllNodeNames">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllNodeNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllObjectInfos(System.String)">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="expr">The expression to match against the stringified
            identities of registered objects. The expression may contain
            a trailing wildcard (*) character.
            
            </param>
            <returns>All the object infos with a stringified identity
            matching the given expression.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllObjectInfos(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="expr">The expression to match against the stringified
            identities of registered objects. The expression may contain
            a trailing wildcard (*) character.
            
            </param>
            <returns>All the object infos with a stringified identity
            matching the given expression.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllRegistryNames">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllRegistryNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllServerIds">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getAllServerIds(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getApplicationInfo(System.String)">
            <summary>
            Get an application descriptor.
            </summary>
            <param name="name">The application name.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getApplicationInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get an application descriptor.
            </summary>
            <param name="name">The application name.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getDefaultApplicationDescriptor">
            <summary>
            Get the default application descriptor.
            </summary>
            <exception name="DeploymentException">Raised if the default application
            descriptor can't be accessed or is invalid.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getDefaultApplicationDescriptor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the default application descriptor.
            </summary>
            <exception name="DeploymentException">Raised if the default application
            descriptor can't be accessed or is invalid.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeAdmin(System.String)">
            <summary>
            Get a proxy to the IceGrid node's admin object.
            </summary>
            <param name="name">The IceGrid node name
            
            </param>
            <returns>A proxy to the IceGrid node's admin object
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the IceGrid node's admin object.
            </summary>
            <param name="name">The IceGrid node name
            
            </param>
            <returns>A proxy to the IceGrid node's admin object
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeHostname(System.String)">
            <summary>
            Get the hostname of this node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node hostname.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeHostname(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the hostname of this node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node hostname.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeInfo(System.String)">
            <summary>
            Get the node information for the node with the given name.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the node information for the node with the given name.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeLoad(System.String)">
            <summary>
            Get the load averages of the node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node load information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeLoad(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the load averages of the node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The node load information.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeProcessorSocketCount(System.String)">
            <summary>
            Get the number of physical processor sockets for the machine
            running the node with the given name.
            Note that this method will return 1 on operating systems where
            this can't be automatically determined and where the
            IceGrid.Node.ProcessorSocketCount property for the node is not
            set.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The number of processor sockets or 1 if the number of
            sockets can't determined.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getNodeProcessorSocketCount(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the number of physical processor sockets for the machine
            running the node with the given name.
            Note that this method will return 1 on operating systems where
            this can't be automatically determined and where the
            IceGrid.Node.ProcessorSocketCount property for the node is not
            set.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>The number of processor sockets or 1 if the number of
            sockets can't determined.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getObjectInfo(Ice.Identity)">
            <summary>
            Get the object info for the object with the given identity.
            </summary>
            <param name="id">The identity of the object.
            
            </param>
            <returns>The object info.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getObjectInfo(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info for the object with the given identity.
            </summary>
            <param name="id">The identity of the object.
            
            </param>
            <returns>The object info.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getObjectInfosByType(System.String)">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The object infos.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getObjectInfosByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The object infos.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getRegistryAdmin(System.String)">
            <summary>
            Get a proxy to the IceGrid registry's admin object.
            </summary>
            <param name="name">The registry name
            
            </param>
            <returns>A proxy to the IceGrid registry's admin object
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getRegistryAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the IceGrid registry's admin object.
            </summary>
            <param name="name">The registry name
            
            </param>
            <returns>A proxy to the IceGrid registry's admin object
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getRegistryInfo(System.String)">
            <summary>
            Get the registry information for the registry with the given name.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>The registry information.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getRegistryInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the registry information for the registry with the given name.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>The registry information.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerAdmin(System.String)">
            <summary>
            Get a proxy to the server's admin object.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>A proxy to the server's admin object
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the server's admin object.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>A proxy to the server's admin object
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerAdminCategory">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            proxy from the admin proxy by changing its identity: use the server ID as name
            and the returned category as category.
            
            </summary>
            <returns>The category for server admin objects.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerAdminCategory(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            proxy from the admin proxy by changing its identity: use the server ID as name
            and the returned category as category.
            
            </summary>
            <returns>The category for server admin objects.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerInfo(System.String)">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <returns>The server information.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <returns>The server information.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerPid(System.String)">
            <summary>
            Get a server's system process id.
            The process id is operating
            system dependent.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server's process id.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerPid(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a server's system process id.
            The process id is operating
            system dependent.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server's process id.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerState(System.String)">
            <summary>
            Get a server's state.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server state.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getServerState(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a server's state.
            </summary>
            <param name="id">The server id.
            
            </param>
            <returns>The server state.
            
            </returns>
            <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getSliceChecksums">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.getSliceChecksums(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor)">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="application">The application name.
            
            </param>
            <param name="node">The name of the node where the server will be
            deployed.
            
            </param>
            <param name="desc">The descriptor of the server instance to deploy.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if server instantiation
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="application">The application name.
            
            </param>
            <param name="node">The name of the node where the server will be
            deployed.
            
            </param>
            <param name="desc">The descriptor of the server instance to deploy.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if server instantiation
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.isServerEnabled(System.String)">
            <summary>
            Check if the server is enabled or disabled.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.isServerEnabled(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check if the server is enabled or disabled.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.patchApplication(System.String,System.Boolean)">
            <summary>
            Patch the given application data.
            </summary>
            <param name="name">The application name.
            
            </param>
            <param name="shutdown">If true, the servers depending on the data to
            patch will be shut down if necessary.
            
            </param>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.
            
            </exception>
            <exception name="PatchException">Raised if the patch failed.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.patchApplication(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Patch the given application data.
            </summary>
            <param name="name">The application name.
            
            </param>
            <param name="shutdown">If true, the servers depending on the data to
            patch will be shut down if necessary.
            
            </param>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.
            
            </exception>
            <exception name="PatchException">Raised if the patch failed.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.patchServer(System.String,System.Boolean)">
            <summary>
            Patch a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="shutdown">If true, servers depending on the data to patch
            will be shut down if necessary.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="PatchException">Raised if the patch failed.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.patchServer(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Patch a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="shutdown">If true, servers depending on the data to patch
            will be shut down if necessary.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="PatchException">Raised if the patch failed.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.pingNode(System.String)">
            <summary>
            Ping an IceGrid node to see if it is active.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>true if the node ping succeeded, false otherwise.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.pingNode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Ping an IceGrid node to see if it is active.
            </summary>
            <param name="name">The node name.
            
            </param>
            <returns>true if the node ping succeeded, false otherwise.
            
            </returns>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.pingRegistry(System.String)">
            <summary>
            Ping an IceGrid registry to see if it is active.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>true if the registry ping succeeded, false otherwise.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.pingRegistry(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Ping an IceGrid registry to see if it is active.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <returns>true if the registry ping succeeded, false otherwise.
            
            </returns>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeAdapter(System.String)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <exception name="AdapterNotExistException">Raised if the adapter doesn't
            exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeAdapter(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <exception name="AdapterNotExistException">Raised if the adapter doesn't
            exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeApplication(System.String)">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="name">The application name.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeApplication(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="name">The application name.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeObject(Ice.Identity)">
            <summary>
            Remove an object from the object registry.
            Only objects added
            with this interface can be removed with this operation. Objects
            added with deployment descriptors should be removed with the
            deployment mechanism.
            
            </summary>
            <param name="id">The identity of the object to be removed from the
            registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            removed. This might happen if the object was added with a
            deployment descriptor.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.removeObject(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove an object from the object registry.
            Only objects added
            with this interface can be removed with this operation. Objects
            added with deployment descriptors should be removed with the
            deployment mechanism.
            
            </summary>
            <param name="id">The identity of the object to be removed from the
            registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            removed. This might happen if the object was added with a
            deployment descriptor.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.sendSignal(System.String,System.String)">
            <summary>
            Send signal to a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="signal">The signal, for example SIGTERM or 15.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="BadSignalException">Raised if the signal is not recognized
            by the target server.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.sendSignal(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send signal to a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="signal">The signal, for example SIGTERM or 15.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.
            
            </exception>
            <exception name="BadSignalException">Raised if the signal is not recognized
            by the target server.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdown">
            <summary>
            Shut down the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdown(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdownNode(System.String)">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdownNode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdownRegistry(System.String)">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.shutdownRegistry(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry could not be
            reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.startServer(System.String)">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="ServerStartException">Raised if the server couldn't be
            started.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.startServer(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="ServerStartException">Raised if the server couldn't be
            started.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.stopServer(System.String)">
            <summary>
            Stop a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="ServerStopException">Raised if the server couldn't be
            stopped.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.stopServer(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Stop a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="ServerStopException">Raised if the server couldn't be
            stopped.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not be
            reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.syncApplication(IceGrid.ApplicationDescriptor)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.syncApplication(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor only if no server restarts are
            necessary for the update of the application. If some servers
            need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            with this new descriptor only if no server restarts are
            necessary for the update of the application. If some servers
            need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateApplication(IceGrid.ApplicationUpdateDescriptor)">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateApplication(IceGrid.ApplicationUpdateDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor)">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            restarted, the synchronization is rejected with a
            DeploymentException.
            
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <exception name="AccessDeniedException">Raised if the session doesn't
            hold the exclusive lock or if another session is holding the
            lock.
            
            </exception>
            <exception name="DeploymentException">Raised if application deployment
            failed.
            
            </exception>
            <exception name="ApplicationNotExistException">Raised if the application
            doesn't exist.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateObject(Ice.ObjectPrx)">
            <summary>
            Update an object in the object registry.
            Only objects added
            with this interface can be updated with this operation. Objects
            added with deployment descriptors should be updated with the
            deployment mechanism.
            
            </summary>
            <param name="obj">The object to be updated to the registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            updated. This might happen if the object was added with a
            deployment descriptor.</exception>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.updateObject(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update an object in the object registry.
            Only objects added
            with this interface can be updated with this operation. Objects
            added with deployment descriptors should be updated with the
            deployment mechanism.
            
            </summary>
            <param name="obj">The object to be updated to the registry.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object isn't
            registered with the registry.
            
            </exception>
            <exception name="DeploymentException">Raised if the object can't be
            updated. This might happen if the object was added with a
            deployment descriptor.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_addApplication(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_addObject(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_addObjectWithType(Ice.ObjectPrx,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="obj">The object to be added to the registry.
            
            </param>
            <param name="type">The object type.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_enableServer(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="enabled">True to enable the server, false to disable it.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAdapterInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the adapter information for the replica group or adapter
            with the given id.
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllAdapterIds(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllApplicationNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllNodeNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllObjectInfos(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="expr">The expression to match against the stringified
            identities of registered objects. The expression may contain
            a trailing wildcard (*) character.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllRegistryNames(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getAllServerIds(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getApplicationInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get an application descriptor.
            </summary>
            <param name="name">The application name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getDefaultApplicationDescriptor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the default application descriptor.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getNodeAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the IceGrid node's admin object.
            </summary>
            <param name="name">The IceGrid node name
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getNodeHostname(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the hostname of this node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getNodeInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the node information for the node with the given name.
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getNodeLoad(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the load averages of the node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getNodeProcessorSocketCount(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the number of physical processor sockets for the machine
            running the node with the given name.
            Note that this method will return 1 on operating systems where
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getObjectInfo(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info for the object with the given identity.
            </summary>
            <param name="id">The identity of the object.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getObjectInfosByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getRegistryAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the IceGrid registry's admin object.
            </summary>
            <param name="name">The registry name
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getRegistryInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the registry information for the registry with the given name.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getServerAdmin(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a proxy to the server's admin object.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getServerAdminCategory(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getServerInfo(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getServerPid(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a server's system process id.
            The process id is operating
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getServerState(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a server's state.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_getSliceChecksums(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="application">The application name.
            
            </param>
            <param name="node">The name of the node where the server will be
            deployed.
            
            </param>
            <param name="desc">The descriptor of the server instance to deploy.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_isServerEnabled(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check if the server is enabled or disabled.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_patchApplication(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Patch the given application data.
            </summary>
            <param name="name">The application name.
            
            </param>
            <param name="shutdown">If true, the servers depending on the data to
            patch will be shut down if necessary.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_patchServer(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Patch a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="shutdown">If true, servers depending on the data to patch
            will be shut down if necessary.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_pingNode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Ping an IceGrid node to see if it is active.
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_pingRegistry(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Ping an IceGrid registry to see if it is active.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_removeAdapter(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_removeApplication(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="name">The application name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_removeObject(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remove an object from the object registry.
            Only objects added
            </summary>
            <param name="id">The identity of the object to be removed from the
            registry.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_sendSignal(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send signal to a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="signal">The signal, for example SIGTERM or 15.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_shutdown(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_shutdownNode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_shutdownRegistry(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_startServer(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_stopServer(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Stop a server.
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_syncApplication(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            </summary>
            <param name="descriptor">The application descriptor.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_updateApplication(IceGrid.ApplicationUpdateDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            </summary>
            <param name="descriptor">The update descriptor.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrxHelper.begin_updateObject(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update an object in the object registry.
            Only objects added
            </summary>
            <param name="obj">The object to be updated to the registry.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.FileIteratorPrxHelper">
            <summary>
            This interface provides access to IceGrid log file contents.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.destroy">
            <summary>
            Destroy the iterator.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.read(System.Int32,System.String[]@)">
            <summary>
            Read lines from the log file.
            </summary>
            <param name="size">Specifies the maximum number of bytes to be
            received. The server will ensure that the returned message
            doesn't exceed the given size.
            
            </param>
            <param name="lines">The lines read from the file. If there was nothing to
            read from the file since the last call to read, an empty
            sequence is returned. The last line of the sequence is always
            incomplete (and therefore no '\n' should be added when writing
            the last line to the to the output device).
            
            </param>
            <returns>True if EOF is encountered.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if there was a problem
            to read lines from the file.</exception>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.read(System.Int32,System.String[]@,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Read lines from the log file.
            </summary>
            <param name="size">Specifies the maximum number of bytes to be
            received. The server will ensure that the returned message
            doesn't exceed the given size.
            
            </param>
            <param name="lines">The lines read from the file. If there was nothing to
            read from the file since the last call to read, an empty
            sequence is returned. The last line of the sequence is always
            incomplete (and therefore no '\n' should be added when writing
            the last line to the to the output device).
            
            </param>
            <returns>True if EOF is encountered.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if there was a problem
            to read lines from the file.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.begin_destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorPrxHelper.begin_read(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Read lines from the log file.
            </summary>
            <param name="size">Specifies the maximum number of bytes to be
            received. The server will ensure that the returned message
            doesn't exceed the given size.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.AdminSessionPrxHelper">
            <summary>
            Used by administrative clients to view,
            update, and receive observer updates from the IceGrid
            registry.
            Admin sessions are created either with the Registry
            object or the registry admin Glacier2.SessionManager object.
            
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.destroy">
            <summary>
            Destroy the session.
            This is called automatically when the
            Router is destroyed.
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the session.
            This is called automatically when the
            Router is destroyed.
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.finishUpdate">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.finishUpdate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getAdmin">
            <summary>
            Get the admin interface.
            The admin object returned by this
            operation can only be accessed by the session.
            
            </summary>
            <returns>The admin interface proxy.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getAdmin(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the admin interface.
            The admin object returned by this
            operation can only be accessed by the session.
            
            </summary>
            <returns>The admin interface proxy.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getAdminCallbackTemplate">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            objects, and the published endpoints of the object adapter hosting
            the admin callback objects.
            
            </summary>
            <returns>A template proxy. The returned proxy is null when the Admin
            session was established using Glacier2.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getAdminCallbackTemplate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            objects, and the published endpoints of the object adapter hosting
            the admin callback objects.
            
            </summary>
            <returns>A template proxy. The returned proxy is null when the Admin
            session was established using Glacier2.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getReplicaName">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.getReplicaName(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.keepAlive">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.keepAlive(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openNodeStdErr(System.String,System.Int32)">
            <summary>
            Open the given node stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openNodeStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given node stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openNodeStdOut(System.String,System.Int32)">
            <summary>
            Open the given node stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openNodeStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given node stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openRegistryStdErr(System.String,System.Int32)">
            <summary>
            Open the given registry stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openRegistryStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given registry stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openRegistryStdOut(System.String,System.Int32)">
            <summary>
            Open the given registry stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openRegistryStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given registry stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="RegistryNotExistException">Raised if the registry
            doesn't exist.
            
            </exception>
            <exception name="RegistryUnreachableException">Raised if the registry
            could not be reached.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerLog(System.String,System.String,System.Int32)">
            <summary>
            Open the given server log file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="path">The path of the log file. A log file can be opened
            only if it's declared in the server or service deployment
            descriptor.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerLog(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server log file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="path">The path of the log file. A log file can be opened
            only if it's declared in the server or service deployment
            descriptor.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerStdErr(System.String,System.Int32)">
            <summary>
            Open the given server stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server stderr file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerStdOut(System.String,System.Int32)">
            <summary>
            Open the given server stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.openServerStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server stdout file for reading.
            The file can be
            read with the returned file iterator.
            
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <returns>An iterator to read the file.
            
            </returns>
            <exception name="FileNotAvailableException">Raised if the file can't be
            read.
            
            </exception>
            <exception name="ServerNotExistException">Raised if the server doesn't
            exist.
            
            </exception>
            <exception name="NodeUnreachableException">Raised if the node could not
            be reached.
            
            </exception>
            <exception name="DeploymentException">Raised if the server couldn't be
            deployed on the node.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx)">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="registryObs">The registry observer.
            
            </param>
            <param name="nodeObs">The node observer.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="registryObs">The registry observer.
            
            </param>
            <param name="nodeObs">The node observer.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity)">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            are using a bidirectional connection to communicate with the
            session.
            
            </summary>
            <param name="registryObs">The registry observer identity.
            
            </param>
            <param name="nodeObs">The node observer identity.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            are using a bidirectional connection to communicate with the
            session.
            
            </summary>
            <param name="registryObs">The registry observer identity.
            
            </param>
            <param name="nodeObs">The node observer identity.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <exception name="ObserverAlreadyRegisteredException">Raised if an
            observer is already registered with this registry.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.startUpdate">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <returns>The current serial.
            
            </returns>
            <exception name="AccessDeniedException">Raised if the exclusive lock can't be
            acquired. This might happen if the lock is currently acquired by
            another session.</exception>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.startUpdate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <returns>The current serial.
            
            </returns>
            <exception name="AccessDeniedException">Raised if the exclusive lock can't be
            acquired. This might happen if the lock is currently acquired by
            another session.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the session.
            This is called automatically when the
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_finishUpdate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_getAdmin(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_getAdminCallbackTemplate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_getReplicaName(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_keepAlive(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openNodeStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given node stderr file for reading.
            The file can be
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openNodeStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given node stdout file for reading.
            The file can be
            </summary>
            <param name="name">The node name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openRegistryStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given registry stderr file for reading.
            The file can be
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openRegistryStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given registry stdout file for reading.
            The file can be
            </summary>
            <param name="name">The registry name.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openServerLog(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server log file for reading.
            The file can be
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="path">The path of the log file. A log file can be opened
            only if it's declared in the server or service deployment
            descriptor.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openServerStdErr(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server stderr file for reading.
            The file can be
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_openServerStdOut(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Open the given server stdout file for reading.
            The file can be
            </summary>
            <param name="id">The server id.
            
            </param>
            <param name="count">Specifies where to start reading the file. If
            negative, the file is read from the begining. If 0 or positive,
            the file is read from the last count lines.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="registryObs">The registry observer.
            
            </param>
            <param name="nodeObs">The node observer.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            </summary>
            <param name="registryObs">The registry observer identity.
            
            </param>
            <param name="nodeObs">The node observer identity.
            
            </param>
            <param name="appObs">The application observer.
            
            </param>
            <param name="adptObs">The adapter observer.
            
            </param>
            <param name="objObs">The object observer.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrxHelper.begin_startUpdate(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.AMD_Admin_patchApplication">
            <summary>
            Patch the given application data.
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Admin_patchApplication.ice_response">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
        </member>
        <member name="T:IceGrid.AMD_Admin_startServer">
            <summary>
            Start a server and wait for its activation.
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Admin_startServer.ice_response">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
        </member>
        <member name="T:IceGrid.AMD_Admin_stopServer">
            <summary>
            Stop a server.
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Admin_stopServer.ice_response">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
        </member>
        <member name="T:IceGrid.AMD_Admin_patchServer">
            <summary>
            Patch a server.
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Admin_patchServer.ice_response">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
        </member>
        <member name="T:IceGrid.CommunicatorDescriptorPrxHelper">
            <summary>
            A communicator descriptor.
            </summary>
        </member>
        <member name="T:IceGrid.ServerDescriptorPrxHelper">
            <summary>
            An Ice server descriptor.
            </summary>
        </member>
        <member name="T:IceGrid.ServiceDescriptorPrxHelper">
            <summary>
            An IceBox service descriptor.
            </summary>
        </member>
        <member name="T:IceGrid.IceBoxDescriptorPrxHelper">
            <summary>
            An IceBox server descriptor.
            </summary>
        </member>
        <member name="T:IceGrid.LoadBalancingPolicyPrxHelper">
            <summary>
            A base class for load balancing policies.
            </summary>
        </member>
        <member name="T:IceGrid.RandomLoadBalancingPolicyPrxHelper">
            <summary>
            Random load balancing policy.
            </summary>
        </member>
        <member name="T:IceGrid.OrderedLoadBalancingPolicyPrxHelper">
            <summary>
            Ordered load balancing policy.
            </summary>
        </member>
        <member name="T:IceGrid.RoundRobinLoadBalancingPolicyPrxHelper">
            <summary>
            Round robin load balancing policy.
            </summary>
        </member>
        <member name="T:IceGrid.AdaptiveLoadBalancingPolicyPrxHelper">
            <summary>
            Adaptive load balancing policy.
            </summary>
        </member>
        <member name="T:IceGrid.BoxedStringPrxHelper">
            <summary>
            A "boxed" string.
            </summary>
        </member>
        <member name="T:IceGrid.BoxedDistributionDescriptorPrxHelper">
            <summary>
            A "boxed" distribution descriptor.
            </summary>
        </member>
        <member name="T:IceGrid.ApplicationNotExistException">
            <summary>
            This exception is raised if an application does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ServerNotExistException">
            <summary>
            This exception is raised if a server does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ServerStartException">
            <summary>
            This exception is raised if a server failed to start.
            </summary>
        </member>
        <member name="T:IceGrid.ServerStopException">
            <summary>
            This exception is raised if a server failed to stop.
            </summary>
        </member>
        <member name="T:IceGrid.AdapterNotExistException">
            <summary>
            This exception is raised if an adapter does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ObjectExistsException">
            <summary>
            This exception is raised if an object already exists.
            </summary>
        </member>
        <member name="T:IceGrid.ObjectNotRegisteredException">
            <summary>
            This exception is raised if an object is not registered.
            </summary>
        </member>
        <member name="T:IceGrid.NodeNotExistException">
            <summary>
            This exception is raised if a node does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.RegistryNotExistException">
            <summary>
            This exception is raised if a registry does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.DeploymentException">
            <summary>
            An exception for deployment errors.
            </summary>
        </member>
        <member name="T:IceGrid.NodeUnreachableException">
            <summary>
            This exception is raised if a node could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.ServerUnreachableException">
            <summary>
            This exception is raised if a server could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.RegistryUnreachableException">
            <summary>
            This exception is raised if a registry could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.BadSignalException">
            <summary>
            This exception is raised if an unknown signal was sent to
            to a server.
            </summary>
        </member>
        <member name="T:IceGrid.PatchException">
            <summary>
            This exception is raised if a patch failed.
            </summary>
        </member>
        <member name="T:IceGrid.AccessDeniedException">
            <summary>
            This exception is raised if a registry lock wasn't
            acquired or is already held by a session.
            </summary>
        </member>
        <member name="T:IceGrid.AllocationException">
            <summary>
            This exception is raised if the allocation of an object failed.
            </summary>
        </member>
        <member name="T:IceGrid.AllocationTimeoutException">
            <summary>
            This exception is raised if the request to allocate an object times
            out.
            </summary>
        </member>
        <member name="T:IceGrid.PermissionDeniedException">
            <summary>
            This exception is raised if a client is denied the ability to create
            a session with IceGrid.
            </summary>
        </member>
        <member name="T:IceGrid.ObserverAlreadyRegisteredException">
            <summary>
            This exception is raised if an observer is already registered with
            the registry.
            </summary>
        </member>
        <member name="T:IceGrid.FileNotAvailableException">
            <summary>
            This exception is raised if a file is not available.
            </summary>
        </member>
        <member name="T:IceGrid.ParseException">
            <summary>
            This exception is raised if an error occurs during parsing.
            </summary>
        </member>
        <member name="T:IceGrid.FileParserOperations_">
            <summary>
            icegridadmin provides a FileParser
            object to transform XML files into ApplicationDescriptor
            objects.
            </summary>
        </member>
        <member name="M:IceGrid.FileParserOperations_.parse(System.String,IceGrid.AdminPrx,Ice.Current)">
            <summary>
            Parse a file.
            </summary>
            <param name="xmlFile">Full pathname to the file.
            
            </param>
            <param name="adminProxy">An Admin proxy, used only to retrieve default
            templates when needed. May be null.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ParseException">Raised if an error occurred during parsing.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.FileParserOperationsNC_">
            <summary>
            icegridadmin provides a FileParser
            object to transform XML files into ApplicationDescriptor
            objects.
            </summary>
        </member>
        <member name="M:IceGrid.FileParserOperationsNC_.parse(System.String,IceGrid.AdminPrx)">
            <summary>
            Parse a file.
            </summary>
            <param name="xmlFile">Full pathname to the file.
            
            </param>
            <param name="adminProxy">An Admin proxy, used only to retrieve default
            templates when needed. May be null.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ParseException">Raised if an error occurred during parsing.</exception>
        </member>
        <member name="T:IceGrid.FileParserPrxHelper">
            <summary>
            icegridadmin provides a FileParser
            object to transform XML files into ApplicationDescriptor
            objects.
            </summary>
        </member>
        <member name="M:IceGrid.FileParserPrxHelper.parse(System.String,IceGrid.AdminPrx)">
            <summary>
            Parse a file.
            </summary>
            <param name="xmlFile">Full pathname to the file.
            
            </param>
            <param name="adminProxy">An Admin proxy, used only to retrieve default
            templates when needed. May be null.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ParseException">Raised if an error occurred during parsing.</exception>
        </member>
        <member name="M:IceGrid.FileParserPrxHelper.parse(System.String,IceGrid.AdminPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parse a file.
            </summary>
            <param name="xmlFile">Full pathname to the file.
            
            </param>
            <param name="adminProxy">An Admin proxy, used only to retrieve default
            templates when needed. May be null.
            
            </param>
            <returns>The application descriptor.
            
            </returns>
            <exception name="ParseException">Raised if an error occurred during parsing.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileParserPrxHelper.begin_parse(System.String,IceGrid.AdminPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parse a file.
            </summary>
            <param name="xmlFile">Full pathname to the file.
            
            </param>
            <param name="adminProxy">An Admin proxy, used only to retrieve default
            templates when needed. May be null.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.LocatorOperations_">
            <summary>
            The IceGrid locator interface provides access to the Query
            and Registry object of the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.LocatorOperations_.getLocalRegistry(Ice.Current)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorOperations_.getLocalQuery(Ice.Current)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.LocatorOperationsNC_">
            <summary>
            The IceGrid locator interface provides access to the Query
            and Registry object of the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.LocatorOperationsNC_.getLocalRegistry">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
        </member>
        <member name="M:IceGrid.LocatorOperationsNC_.getLocalQuery">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
        </member>
        <member name="T:IceGrid.LocatorPrxHelper">
            <summary>
            The IceGrid locator interface provides access to the Query
            and Registry object of the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.findAdapterById(System.String)">
            <summary>
            Find an adapter by id and return its proxy (a dummy direct
            proxy created by the adapter).
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>The adapter proxy, or null if the adapter is not active.
            
            </returns>
            <exception name="AdapterNotFoundException">Raised if the adapter cannot be
            found.</exception>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.findAdapterById(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find an adapter by id and return its proxy (a dummy direct
            proxy created by the adapter).
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <returns>The adapter proxy, or null if the adapter is not active.
            
            </returns>
            <exception name="AdapterNotFoundException">Raised if the adapter cannot be
            found.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.findObjectById(Ice.Identity)">
            <summary>
            Find an object by identity and return its proxy.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy, or null if the object is not active.
            
            </returns>
            <exception name="ObjectNotFoundException">Raised if the object cannot
            be found.</exception>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.findObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find an object by identity and return its proxy.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy, or null if the object is not active.
            
            </returns>
            <exception name="ObjectNotFoundException">Raised if the object cannot
            be found.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getRegistry">
            <summary>
            Get the locator registry.
            </summary>
            <returns>The locator registry.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getRegistry(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the locator registry.
            </summary>
            <returns>The locator registry.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getLocalQuery">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getLocalQuery(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getLocalRegistry">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.getLocalRegistry(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.begin_findAdapterById(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find an adapter by id and return its proxy (a dummy direct
            proxy created by the adapter).
            </summary>
            <param name="id">The adapter id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.begin_findObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find an object by identity and return its proxy.
            </summary>
            <param name="id">The identity.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.begin_getRegistry(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the locator registry.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.begin_getLocalQuery(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrxHelper.begin_getLocalRegistry(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.NodeObserverOperations_">
            <summary>
            The node observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            nodes.
            </summary>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeInit(IceGrid.NodeDynamicInfo[],Ice.Current)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeUp(IceGrid.NodeDynamicInfo,Ice.Current)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeDown(System.String,Ice.Current)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.Current)">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="node">The node hosting the server.
            
            </param>
            <param name="updatedInfo">The new server state.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.Current)">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="node">The node hosting the adapter.
            
            </param>
            <param name="updatedInfo">The new adapter state.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.NodeObserverOperationsNC_">
            <summary>
            The node observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            nodes.
            </summary>
        </member>
        <member name="M:IceGrid.NodeObserverOperationsNC_.nodeInit(IceGrid.NodeDynamicInfo[])">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            
            </summary>
            <param name="nodes">The current state of the nodes.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperationsNC_.nodeUp(IceGrid.NodeDynamicInfo)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperationsNC_.nodeDown(System.String)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperationsNC_.updateServer(System.String,IceGrid.ServerDynamicInfo)">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="node">The node hosting the server.
            
            </param>
            <param name="updatedInfo">The new server state.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperationsNC_.updateAdapter(System.String,IceGrid.AdapterDynamicInfo)">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="node">The node hosting the adapter.
            
            </param>
            <param name="updatedInfo">The new adapter state.</param>
        </member>
        <member name="T:IceGrid.ApplicationObserverOperations_">
            <summary>
            The database observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            registry database.
            </summary>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.Current)">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="serial">The current serial number of the registry
            database. This serial number allows observers to make sure that
            their internal state is synchronized with the registry.
            
            </param>
            <param name="applications">The applications currently registered with
            the registry.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.Current)">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the new application.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationRemoved(System.Int32,System.String,Ice.Current)">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="name">The name of the application that was removed.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.Current)">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the update.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ApplicationObserverOperationsNC_">
            <summary>
            The database observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            registry database.
            </summary>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperationsNC_.applicationInit(System.Int32,IceGrid.ApplicationInfo[])">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="serial">The current serial number of the registry
            database. This serial number allows observers to make sure that
            their internal state is synchronized with the registry.
            
            </param>
            <param name="applications">The applications currently registered with
            the registry.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperationsNC_.applicationAdded(System.Int32,IceGrid.ApplicationInfo)">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the new application.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperationsNC_.applicationRemoved(System.Int32,System.String)">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="name">The name of the application that was removed.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperationsNC_.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo)">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the update.</param>
        </member>
        <member name="T:IceGrid.AdapterObserverOperations_">
            <summary>
            This interface allows applications to monitor the state of object
            adapters that are registered with IceGrid.
            </summary>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterInit(IceGrid.AdapterInfo[],Ice.Current)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterAdded(IceGrid.AdapterInfo,Ice.Current)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterUpdated(IceGrid.AdapterInfo,Ice.Current)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterRemoved(System.String,Ice.Current)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdapterObserverOperationsNC_">
            <summary>
            This interface allows applications to monitor the state of object
            adapters that are registered with IceGrid.
            </summary>
        </member>
        <member name="M:IceGrid.AdapterObserverOperationsNC_.adapterInit(IceGrid.AdapterInfo[])">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperationsNC_.adapterAdded(IceGrid.AdapterInfo)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperationsNC_.adapterUpdated(IceGrid.AdapterInfo)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperationsNC_.adapterRemoved(System.String)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
        </member>
        <member name="T:IceGrid.ObjectObserverOperations_">
            <summary>
            This interface allows applications to monitor IceGrid well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectInit(IceGrid.ObjectInfo[],Ice.Current)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectAdded(IceGrid.ObjectInfo,Ice.Current)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectUpdated(IceGrid.ObjectInfo,Ice.Current)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectRemoved(Ice.Identity,Ice.Current)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ObjectObserverOperationsNC_">
            <summary>
            This interface allows applications to monitor IceGrid well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.ObjectObserverOperationsNC_.objectInit(IceGrid.ObjectInfo[])">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperationsNC_.objectAdded(IceGrid.ObjectInfo)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperationsNC_.objectUpdated(IceGrid.ObjectInfo)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperationsNC_.objectRemoved(Ice.Identity)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
        </member>
        <member name="T:IceGrid.RegistryObserverOperations_">
            <summary>
            This interface allows applications to monitor changes the state
            of the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryInit(IceGrid.RegistryInfo[],Ice.Current)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryUp(IceGrid.RegistryInfo,Ice.Current)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryDown(System.String,Ice.Current)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryObserverOperationsNC_">
            <summary>
            This interface allows applications to monitor changes the state
            of the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryObserverOperationsNC_.registryInit(IceGrid.RegistryInfo[])">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperationsNC_.registryUp(IceGrid.RegistryInfo)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperationsNC_.registryDown(System.String)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
        </member>
        <member name="T:IceGrid.NodeObserverPrxHelper">
            <summary>
            The node observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            nodes.
            </summary>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeDown(System.String)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeDown(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeInit(IceGrid.NodeDynamicInfo[])">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            
            </summary>
            <param name="nodes">The current state of the nodes.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeInit(IceGrid.NodeDynamicInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeUp(IceGrid.NodeDynamicInfo)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.nodeUp(IceGrid.NodeDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.updateAdapter(System.String,IceGrid.AdapterDynamicInfo)">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="node">The node hosting the adapter.
            
            </param>
            <param name="updatedInfo">The new adapter state.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.updateAdapter(System.String,IceGrid.AdapterDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="node">The node hosting the adapter.
            
            </param>
            <param name="updatedInfo">The new adapter state.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.updateServer(System.String,IceGrid.ServerDynamicInfo)">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="node">The node hosting the server.
            
            </param>
            <param name="updatedInfo">The new server state.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.updateServer(System.String,IceGrid.ServerDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="node">The node hosting the server.
            
            </param>
            <param name="updatedInfo">The new server state.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.begin_nodeDown(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.begin_nodeInit(IceGrid.NodeDynamicInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.begin_nodeUp(IceGrid.NodeDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.begin_updateAdapter(System.String,IceGrid.AdapterDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="node">The node hosting the adapter.
            
            </param>
            <param name="updatedInfo">The new adapter state.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrxHelper.begin_updateServer(System.String,IceGrid.ServerDynamicInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="node">The node hosting the server.
            
            </param>
            <param name="updatedInfo">The new server state.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.ApplicationObserverPrxHelper">
            <summary>
            The database observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            registry database.
            </summary>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationAdded(System.Int32,IceGrid.ApplicationInfo)">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the new application.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationAdded(System.Int32,IceGrid.ApplicationInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the new application.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationInit(System.Int32,IceGrid.ApplicationInfo[])">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="serial">The current serial number of the registry
            database. This serial number allows observers to make sure that
            their internal state is synchronized with the registry.
            
            </param>
            <param name="applications">The applications currently registered with
            the registry.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationInit(System.Int32,IceGrid.ApplicationInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="serial">The current serial number of the registry
            database. This serial number allows observers to make sure that
            their internal state is synchronized with the registry.
            
            </param>
            <param name="applications">The applications currently registered with
            the registry.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationRemoved(System.Int32,System.String)">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="name">The name of the application that was removed.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationRemoved(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="name">The name of the application that was removed.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo)">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the update.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the update.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.begin_applicationAdded(System.Int32,IceGrid.ApplicationInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the new application.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.begin_applicationInit(System.Int32,IceGrid.ApplicationInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="serial">The current serial number of the registry
            database. This serial number allows observers to make sure that
            their internal state is synchronized with the registry.
            
            </param>
            <param name="applications">The applications currently registered with
            the registry.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.begin_applicationRemoved(System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="name">The name of the application that was removed.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrxHelper.begin_applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="serial">The new serial number of the registry database.
            
            </param>
            <param name="desc">The descriptor of the update.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.AdapterObserverPrxHelper">
            <summary>
            This interface allows applications to monitor the state of object
            adapters that are registered with IceGrid.
            </summary>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterAdded(IceGrid.AdapterInfo)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterAdded(IceGrid.AdapterInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterInit(IceGrid.AdapterInfo[])">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterInit(IceGrid.AdapterInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterRemoved(System.String)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterRemoved(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterUpdated(IceGrid.AdapterInfo)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.adapterUpdated(IceGrid.AdapterInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.begin_adapterAdded(IceGrid.AdapterInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.begin_adapterInit(IceGrid.AdapterInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.begin_adapterRemoved(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrxHelper.begin_adapterUpdated(IceGrid.AdapterInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.ObjectObserverPrxHelper">
            <summary>
            This interface allows applications to monitor IceGrid well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectAdded(IceGrid.ObjectInfo)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectAdded(IceGrid.ObjectInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectInit(IceGrid.ObjectInfo[])">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectInit(IceGrid.ObjectInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectRemoved(Ice.Identity)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectRemoved(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectUpdated(IceGrid.ObjectInfo)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.objectUpdated(IceGrid.ObjectInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.begin_objectAdded(IceGrid.ObjectInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.begin_objectInit(IceGrid.ObjectInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.begin_objectRemoved(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrxHelper.begin_objectUpdated(IceGrid.ObjectInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryObserverPrxHelper">
            <summary>
            This interface allows applications to monitor changes the state
            of the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryDown(System.String)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryDown(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryInit(IceGrid.RegistryInfo[])">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryInit(IceGrid.RegistryInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryUp(IceGrid.RegistryInfo)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.registryUp(IceGrid.RegistryInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.begin_registryDown(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.begin_registryInit(IceGrid.RegistryInfo[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrxHelper.begin_registryUp(IceGrid.RegistryInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.QueryOperations_">
            <summary>
            The IceGrid query interface.
            This interface is accessible to
            Ice clients who wish to look up well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectById(Ice.Identity,Ice.Current)">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy or null if no such object has been found.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectByType(System.String,Ice.Current)">
            <summary>
            Find a well-known object by type.
            If there are several objects
            registered for the given type, the object is randomly
            selected.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.Current)">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            the registry does not know which node hosts the object
            (for example, because the object was registered with a direct proxy), the
            registry assumes the object is hosted on a node that has a load
            average of 1.0.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="sample">The sampling interval.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findAllObjectsByType(System.String,Ice.Current)">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxies or an empty sequence, if no such objects
            have been found.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findAllReplicas(Ice.ObjectPrx,Ice.Current)">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            replica group, an empty sequence is returned.
            
            </summary>
            <param name="proxy">The object proxy.
            
            </param>
            <returns>The proxies of each object replica or an empty sequence,
            if the given proxy is not from a replica group.</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.QueryOperationsNC_">
            <summary>
            The IceGrid query interface.
            This interface is accessible to
            Ice clients who wish to look up well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.QueryOperationsNC_.findObjectById(Ice.Identity)">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy or null if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryOperationsNC_.findObjectByType(System.String)">
            <summary>
            Find a well-known object by type.
            If there are several objects
            registered for the given type, the object is randomly
            selected.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryOperationsNC_.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample)">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            the registry does not know which node hosts the object
            (for example, because the object was registered with a direct proxy), the
            registry assumes the object is hosted on a node that has a load
            average of 1.0.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="sample">The sampling interval.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryOperationsNC_.findAllObjectsByType(System.String)">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxies or an empty sequence, if no such objects
            have been found.</returns>
        </member>
        <member name="M:IceGrid.QueryOperationsNC_.findAllReplicas(Ice.ObjectPrx)">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            replica group, an empty sequence is returned.
            
            </summary>
            <param name="proxy">The object proxy.
            
            </param>
            <returns>The proxies of each object replica or an empty sequence,
            if the given proxy is not from a replica group.</returns>
        </member>
        <member name="T:IceGrid.QueryPrxHelper">
            <summary>
            The IceGrid query interface.
            This interface is accessible to
            Ice clients who wish to look up well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findAllObjectsByType(System.String)">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxies or an empty sequence, if no such objects
            have been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findAllObjectsByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxies or an empty sequence, if no such objects
            have been found.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findAllReplicas(Ice.ObjectPrx)">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            replica group, an empty sequence is returned.
            
            </summary>
            <param name="proxy">The object proxy.
            
            </param>
            <returns>The proxies of each object replica or an empty sequence,
            if the given proxy is not from a replica group.</returns>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findAllReplicas(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            replica group, an empty sequence is returned.
            
            </summary>
            <param name="proxy">The object proxy.
            
            </param>
            <returns>The proxies of each object replica or an empty sequence,
            if the given proxy is not from a replica group.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectById(Ice.Identity)">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy or null if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="id">The identity.
            
            </param>
            <returns>The proxy or null if no such object has been found.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectByType(System.String)">
            <summary>
            Find a well-known object by type.
            If there are several objects
            registered for the given type, the object is randomly
            selected.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by type.
            If there are several objects
            registered for the given type, the object is randomly
            selected.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample)">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            the registry does not know which node hosts the object
            (for example, because the object was registered with a direct proxy), the
            registry assumes the object is hosted on a node that has a load
            average of 1.0.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="sample">The sampling interval.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            the registry does not know which node hosts the object
            (for example, because the object was registered with a direct proxy), the
            registry assumes the object is hosted on a node that has a load
            average of 1.0.
            
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="sample">The sampling interval.
            
            </param>
            <returns>The proxy or null, if no such object has been found.</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.begin_findAllObjectsByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.begin_findAllReplicas(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            </summary>
            <param name="proxy">The object proxy.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.begin_findObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="id">The identity.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.begin_findObjectByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by type.
            If there are several objects
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrxHelper.begin_findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            </summary>
            <param name="type">The object type.
            
            </param>
            <param name="sample">The sampling interval.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryOperations_">
            <summary>
            The IceGrid registry allows clients create sessions
            directly with the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createSession(System.String,System.String,Ice.Current)">
            <summary>
            Create a client session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createAdminSession(System.String,System.String,Ice.Current)">
            <summary>
            Create an administrative session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createSessionFromSecureConnection(Ice.Current)">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createAdminSessionFromSecureConnection(Ice.Current)">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.getSessionTimeout(Ice.Current)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            doesn't call the session keepAlive method in the time interval
            defined by this timeout, IceGrid might reap the session.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.getACMTimeout(Ice.Current)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            connection heartbeats can enable them instead of explicitly
            sending keep alives requests.
            
            NOTE: This method is only available since Ice 3.6.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryOperationsNC_">
            <summary>
            The IceGrid registry allows clients create sessions
            directly with the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.createSession(System.String,System.String)">
            <summary>
            Create a client session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.createAdminSession(System.String,System.String)">
            <summary>
            Create an administrative session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.createSessionFromSecureConnection">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.createAdminSessionFromSecureConnection">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.getSessionTimeout">
            <summary>
            Get the session timeout.
            If a client or administrative client
            doesn't call the session keepAlive method in the time interval
            defined by this timeout, IceGrid might reap the session.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="M:IceGrid.RegistryOperationsNC_.getACMTimeout">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            connection heartbeats can enable them instead of explicitly
            sending keep alives requests.
            
            NOTE: This method is only available since Ice 3.6.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="T:IceGrid.RegistryPrxHelper">
            <summary>
            The IceGrid registry allows clients create sessions
            directly with the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createAdminSession(System.String,System.String)">
            <summary>
            Create an administrative session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createAdminSession(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create an administrative session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createAdminSessionFromSecureConnection">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createAdminSessionFromSecureConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createSession(System.String,System.String)">
            <summary>
            Create a client session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createSession(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a client session.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createSessionFromSecureConnection">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.createSessionFromSecureConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <returns>A proxy for the newly created session.
            
            </returns>
            <exception name="PermissionDeniedException">Raised if the password for
            the given user id is not correct, or if the user is not allowed
            access.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.getACMTimeout">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            connection heartbeats can enable them instead of explicitly
            sending keep alives requests.
            
            NOTE: This method is only available since Ice 3.6.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.getACMTimeout(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            connection heartbeats can enable them instead of explicitly
            sending keep alives requests.
            
            NOTE: This method is only available since Ice 3.6.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.getSessionTimeout">
            <summary>
            Get the session timeout.
            If a client or administrative client
            doesn't call the session keepAlive method in the time interval
            defined by this timeout, IceGrid might reap the session.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.getSessionTimeout(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the session timeout.
            If a client or administrative client
            doesn't call the session keepAlive method in the time interval
            defined by this timeout, IceGrid might reap the session.
            
            </summary>
            <returns>The timeout (in seconds).</returns>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_createAdminSession(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create an administrative session.
            </summary>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_createAdminSessionFromSecureConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_createSession(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a client session.
            </summary>
            <param name="userId">The user id.
            
            </param>
            <param name="password">The password for the given user id.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_createSessionFromSecureConnection(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_getACMTimeout(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrxHelper.begin_getSessionTimeout(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.SessionOperations_">
            <summary>
            A session object is used by IceGrid clients to allocate and
            release objects.
            Client sessions are either created with the
            Registry object or the registry client Glacier2.SessionManager
            object.
            
            </summary>
        </member>
        <member name="M:IceGrid.SessionOperations_.keepAlive(Ice.Current)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.allocateObjectById_async(IceGrid.AMD_Session_allocateObjectById,Ice.Identity,Ice.Current)">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The identity of the object to allocate.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.allocateObjectByType_async(IceGrid.AMD_Session_allocateObjectByType,System.String,Ice.Current)">
            <summary>
            Allocate an object with the given type.
            Depending on the
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="type">The type of the object.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.releaseObject(Ice.Identity,Ice.Current)">
            <summary>
            Release an object.
            </summary>
            <param name="id">The identity of the object to release.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the given object can't be
            released. This might happen if the object isn't allocatable or
            isn't allocated by the session.
            
            </exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.setAllocationTimeout(System.Int32,Ice.Current)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            allocation request, the request will hang for the duration of
            this timeout.
            
            </summary>
            <param name="timeout">The timeout in milliseconds.
            
            </param>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.SessionOperationsNC_">
            <summary>
            A session object is used by IceGrid clients to allocate and
            release objects.
            Client sessions are either created with the
            Registry object or the registry client Glacier2.SessionManager
            object.
            
            </summary>
        </member>
        <member name="M:IceGrid.SessionOperationsNC_.keepAlive">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
        </member>
        <member name="M:IceGrid.SessionOperationsNC_.allocateObjectById_async(IceGrid.AMD_Session_allocateObjectById,Ice.Identity)">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="id">The identity of the object to allocate.
            
            </param>
        </member>
        <member name="M:IceGrid.SessionOperationsNC_.allocateObjectByType_async(IceGrid.AMD_Session_allocateObjectByType,System.String)">
            <summary>
            Allocate an object with the given type.
            Depending on the
            </summary>
            <param name="cb__">The callback object for the operation.</param>
            <param name="type">The type of the object.
            
            </param>
        </member>
        <member name="M:IceGrid.SessionOperationsNC_.releaseObject(Ice.Identity)">
            <summary>
            Release an object.
            </summary>
            <param name="id">The identity of the object to release.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the given object can't be
            released. This might happen if the object isn't allocatable or
            isn't allocated by the session.
            
            </exception>
        </member>
        <member name="M:IceGrid.SessionOperationsNC_.setAllocationTimeout(System.Int32)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            allocation request, the request will hang for the duration of
            this timeout.
            
            </summary>
            <param name="timeout">The timeout in milliseconds.
            
            </param>
        </member>
        <member name="T:IceGrid.SessionPrxHelper">
            <summary>
            A session object is used by IceGrid clients to allocate and
            release objects.
            Client sessions are either created with the
            Registry object or the registry client Glacier2.SessionManager
            object.
            
            </summary>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.destroy">
            <summary>
            Destroy the session.
            This is called automatically when the
            Router is destroyed.
            </summary>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the session.
            This is called automatically when the
            Router is destroyed.
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.allocateObjectById(Ice.Identity)">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            operation might hang until the object is available or until the
            timeout is reached.
            
            </summary>
            <param name="id">The identity of the object to allocate.
            
            </param>
            <returns>The proxy of the allocated object.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the object can't be
            allocated.
            
            </exception>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.allocateObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            operation might hang until the object is available or until the
            timeout is reached.
            
            </summary>
            <param name="id">The identity of the object to allocate.
            
            </param>
            <returns>The proxy of the allocated object.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the object can't be
            allocated.
            
            </exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.allocateObjectByType(System.String)">
            <summary>
            Allocate an object with the given type.
            Depending on the
            allocation timeout, this operation can block until an object
            becomes available or until the timeout is reached.
            
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The proxy of the allocated object.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if no objects with the given type can be allocated.
            
            </exception>
            <exception name="AllocationException">Raised if the object could not be allocated.
            
            </exception>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.allocateObjectByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Allocate an object with the given type.
            Depending on the
            allocation timeout, this operation can block until an object
            becomes available or until the timeout is reached.
            
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <returns>The proxy of the allocated object.
            
            </returns>
            <exception name="ObjectNotRegisteredException">Raised if no objects with the given type can be allocated.
            
            </exception>
            <exception name="AllocationException">Raised if the object could not be allocated.
            
            </exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.keepAlive">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.keepAlive(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Keep the session alive.
            Clients should call this operation
            regularly to prevent the server from reaping the session.
            
            </summary>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.releaseObject(Ice.Identity)">
            <summary>
            Release an object.
            </summary>
            <param name="id">The identity of the object to release.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the given object can't be
            released. This might happen if the object isn't allocatable or
            isn't allocated by the session.
            
            </exception>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.releaseObject(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Release an object.
            </summary>
            <param name="id">The identity of the object to release.
            
            </param>
            <exception name="ObjectNotRegisteredException">Raised if the object with
            the given identity is not registered with the registry.
            
            </exception>
            <exception name="AllocationException">Raised if the given object can't be
            released. This might happen if the object isn't allocatable or
            isn't allocated by the session.
            
            </exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.setAllocationTimeout(System.Int32)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            allocation request, the request will hang for the duration of
            this timeout.
            
            </summary>
            <param name="timeout">The timeout in milliseconds.
            
            </param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.setAllocationTimeout(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            allocation request, the request will hang for the duration of
            this timeout.
            
            </summary>
            <param name="timeout">The timeout in milliseconds.
            
            </param>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_destroy(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Destroy the session.
            This is called automatically when the
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_allocateObjectById(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            </summary>
            <param name="id">The identity of the object to allocate.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_allocateObjectByType(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Allocate an object with the given type.
            Depending on the
            </summary>
            <param name="type">The type of the object.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_keepAlive(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_releaseObject(Ice.Identity,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Release an object.
            </summary>
            <param name="id">The identity of the object to release.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrxHelper.begin_setAllocationTimeout(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="timeout">The timeout in milliseconds.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
        <member name="T:IceGrid.AMD_Session_allocateObjectById">
            <summary>
            Allocate an object.
            Depending on the allocation timeout, this
            operation might hang until the object is available or until the
            timeout is reached.
            
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Session_allocateObjectById.ice_response(Ice.ObjectPrx)">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
            <param name="ret__">(return value) The proxy of the allocated object.
            
            </param>
        </member>
        <member name="T:IceGrid.AMD_Session_allocateObjectByType">
            <summary>
            Allocate an object with the given type.
            Depending on the
            allocation timeout, this operation can block until an object
            becomes available or until the timeout is reached.
            
            </summary>
        </member>
        <member name="M:IceGrid.AMD_Session_allocateObjectByType.ice_response(Ice.ObjectPrx)">
            <summary>
            ice_response indicates that
            the operation completed successfully.
            </summary>
            <param name="ret__">(return value) The proxy of the allocated object.
            
            </param>
        </member>
        <member name="T:IceGrid.UserAccountNotFoundException">
            <summary>
            This exception is raised if a user account for a given session
            identifier can't be found.
            </summary>
        </member>
        <member name="T:IceGrid.UserAccountMapperOperations_">
            <summary>
            A user account mapper object is used by IceGrid nodes to map
            session identifiers to user accounts.
            </summary>
        </member>
        <member name="M:IceGrid.UserAccountMapperOperations_.getUserAccount(System.String,Ice.Current)">
            <summary>
            Get the name of the user account for the given user.
            This is
            used by IceGrid nodes to figure out the user account to use
            to run servers.
            
            </summary>
            <param name="user">The value of the server descriptor's user
            attribute. If this attribute is not defined, and the server's
            activation mode is session, the default value of
            user is the session identifier.
            
            </param>
            <returns>The user account name.
            
            </returns>
            <exception name="UserAccountNotFoundException">Raised if no user account
            is found for the given user.</exception>
            <param name="current__">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.UserAccountMapperOperationsNC_">
            <summary>
            A user account mapper object is used by IceGrid nodes to map
            session identifiers to user accounts.
            </summary>
        </member>
        <member name="M:IceGrid.UserAccountMapperOperationsNC_.getUserAccount(System.String)">
            <summary>
            Get the name of the user account for the given user.
            This is
            used by IceGrid nodes to figure out the user account to use
            to run servers.
            
            </summary>
            <param name="user">The value of the server descriptor's user
            attribute. If this attribute is not defined, and the server's
            activation mode is session, the default value of
            user is the session identifier.
            
            </param>
            <returns>The user account name.
            
            </returns>
            <exception name="UserAccountNotFoundException">Raised if no user account
            is found for the given user.</exception>
        </member>
        <member name="T:IceGrid.UserAccountMapperPrxHelper">
            <summary>
            A user account mapper object is used by IceGrid nodes to map
            session identifiers to user accounts.
            </summary>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrxHelper.getUserAccount(System.String)">
            <summary>
            Get the name of the user account for the given user.
            This is
            used by IceGrid nodes to figure out the user account to use
            to run servers.
            
            </summary>
            <param name="user">The value of the server descriptor's user
            attribute. If this attribute is not defined, and the server's
            activation mode is session, the default value of
            user is the session identifier.
            
            </param>
            <returns>The user account name.
            
            </returns>
            <exception name="UserAccountNotFoundException">Raised if no user account
            is found for the given user.</exception>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrxHelper.getUserAccount(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the name of the user account for the given user.
            This is
            used by IceGrid nodes to figure out the user account to use
            to run servers.
            
            </summary>
            <param name="user">The value of the server descriptor's user
            attribute. If this attribute is not defined, and the server's
            activation mode is session, the default value of
            user is the session identifier.
            
            </param>
            <returns>The user account name.
            
            </returns>
            <exception name="UserAccountNotFoundException">Raised if no user account
            is found for the given user.</exception>
            <param name="context__">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrxHelper.begin_getUserAccount(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the name of the user account for the given user.
            This is
            </summary>
            <param name="user">The value of the server descriptor's user
            attribute. If this attribute is not defined, and the server's
            activation mode is session, the default value of
            user is the session identifier.
            
            </param>
            <param name="ctx__">The Context map to send with the invocation.</param>
        </member>
    </members>
</doc>
